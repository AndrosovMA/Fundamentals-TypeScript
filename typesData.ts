/*
TypeScript — это язык с открытым кодом, разработанный корпорацией Майкрософт.
TypeScript — это надмножество JavaScript.
Основной компонент TypeScript — это система типов. В TypeScript можно задать тип данных переменной или параметра, используя указание типа.
Анализ типов TypeScript производится исключительно во время компиляции, поэтому во время выполнения программы дополнительной нагрузки не создается.
Видишь ошибки на момента написания кода
*/

//==================================================================================================
//==================================================================================================
//==================================================================================================

//=======Типы аннотации(объявления переменных): явная и неявная
let x:number;
let y = 4;
let z; // определен тип как any


//=======Типы и подтипы:
//Все типы в TypeScript являются подтипами одного типа верхнего уровня, называемого any


//========1.Примитивные типы - boolean, number, string, void, null и undefined , а также пользовательские перечисления или типы enum
//Тип void нужен лишь для того, чтобы указывать на отсутствие значения, например в функции без возвращаемого значения.

//=======enum - упрощет работу с наборами связанных констант.
enum Season  {
    Winter = 3,
    Spring,
    Summer,
    Autumn
}
let current: Season = Season.Winter;
console.log('employeeStatus', current); // 1
console.log(Season[current]); //Winter
/*
Самое годное применение enum это ограниченный набор значений каких либо параметров, хороший пример дни
недели или название месяцев, либо например роль user в сервисе - enum Role { Admin, Manager, Client },
а затем присваиваешь пользователям одно из этих значений например user.role = Role.Manager, и затем в
том месте где разным пользователям разрешаются действия в зависимости от роли ты проверяешь какая у него
роль - if(user.role === Role.Manager){ //access }, такое использование намного лучше и очевиднее и безопаснее
чем например user.role = 'admin', исключает опечатку, задаёт регламент для командной разработки и т.д.,
тоже самое и с днями недели, месяцами, городами, странами, цветами, и т.д. и т.п.
*/

//=======null - есть разница с JS
/*
В JS
typeof null;       - object
typeof undefined;  - undefined
*/
const u: undefined = undefined;
const n: null = null;

//=======void - для определения отсутствующих типов - функция без возвращаемого значения
const greetUser = (): void => {
    alert('Hello')
}


//===============2. Типы объектов - класс, интерфейс, массив, литералы=====================

//=======Array=======
let list: number[] = [1,2,3];
let list_1: Array<number> = [1,2,4]; //Generic type

let xArr: [string, number] = ['typeScript', 42];
//а если не знаем сколько элементов - динамическое формирование данных используем any


//=======Never type - может использоваться в двух случаях=======
//когда function возвращает ошибку и не заканчивает свое выполнение
const msg = 'hellow';
const errow = (msg: string): never => {
    throw new Error (msg)
}

//когда function постоянно выполняется -бесконечный цикл
const infiniteLoop = (): never => {
    while (true) {

    }
}

//=======Object type=======
const create = (o:object | null): void => {

}

//=======Multyple type for one value=======
let id: number | string

//=======Type - пользовательские типы======= наподобие alias
type Name = string;
let id1: Name;
id1 = '10';



//3. Параметры типов



